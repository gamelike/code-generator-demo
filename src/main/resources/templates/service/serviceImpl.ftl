/* code generated by freemarker */
<#import "../global.ftl" as common>
package ${packageName}.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;
import com.ums.service.common.exception.BizInternalServerException;
import com.ums.service.common.exception.BizIllegalArgumentException;
import com.ums.service.common.exception.BizResourceNotFoundException;
import com.ums.common.tools.basic.UUID;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.service.${entityName}Service;
import ${packageName}.repository.${entityName}DAO;
import ${packageName}.model.entity.${entityName};
import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class ${entityName}ServiceImpl implements ${entityName}Service {

    private final ${entityName}DAO ${entityName?uncap_first}DAO;

    @Override
    public ${entityName} queryById(<#list fieldList as fieldItem ><#if fieldItem.primaryKey>${fieldItem.type} id</#if></#list>) {
        try {
            if (ObjectUtils.isEmpty(id)) {
                throw new BizIllegalArgumentException("查询ID不能为空");
            }
            ${entityName} item = ${entityName?uncap_first}DAO.queryById(id);
            if (item == null) {
                throw new BizResourceNotFoundException("资源不存在, id: " + id);
            }
            return item;
        } catch (Exception e) {
            log.error("查询${entityName}错误", e);
            throw new BizInternalServerException("查询${entityName}错误");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${entityName} insert(${entityName} ${entityName?uncap_first}) {
        try {
            fillPrimaryKey(${entityName?uncap_first});
            ${entityName?uncap_first}DAO.add(${entityName?uncap_first});
            return ${entityName?uncap_first};
        } catch (Exception e) {
            log.error("insert ${entityName} error", e);
            throw new BizInternalServerException("插入${entityName}错误");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int batchInsert(List<${entityName}> ${entityName?uncap_first}List) {
        try {
            ${entityName?uncap_first}List.forEach(it -> fillPrimaryKey(it));
            int insertColumn = ${entityName?uncap_first}DAO.add(${entityName?uncap_first}List.toArray(${entityName}[]::new));
            log.info("批量插入 {} 条${entityName}数据", insertColumn);
            return insertColumn;
        } catch (Exception e) {
            log.error("insert ${entityName} error", e);
            throw new BizInternalServerException("批量插入${entityName}错误");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${entityName} update(${entityName} ${entityName?uncap_first}) {
        try {
            ${entityName} item = queryById(${entityName?uncap_first}.get${common.getPrimaryName(fieldList)?cap_first}());
            if (item == null) {
                throw new BizResourceNotFoundException("资源不存在: entity: " + ${entityName?uncap_first});
            }
            ${entityName?uncap_first}DAO.update(${entityName?uncap_first});
            return item;
        } catch (Exception e) {
            log.error("update ${entityName} error", e);
            throw new BizInternalServerException("更新${entityName}错误");
        }
    }


    @Override
    @Transactional(rollbackFor = Exception.class)
    public int batchUpdate(List<${entityName}> ${entityName?uncap_first}List) {
        try {
            List<String> ids = ${entityName?uncap_first}DAO.existsByIds(${entityName?uncap_first}List
               .stream()
               .map(${entityName}::get${common.getPrimaryName(fieldList)?cap_first})
               .toList());
            if (ids.size() != ${entityName?uncap_first}List.size()) {
                throw new BizResourceNotFoundException("资源不存在: 存在的个数" + ids.size() +
                    " , 更新的个数" + ${entityName?uncap_first}List.size());
            }
            int column = ${entityName?uncap_first}DAO.update(${entityName?uncap_first}List.toArray(${entityName}[]::new));
            log.info("批量更新 {} 条${entityName}", column);
            return column;
        } catch (Exception e) {
            log.error("update ${entityName} error", e);
            throw new BizInternalServerException("批量更新${entityName}错误");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${entityName} delete(<#list fieldList as fieldItem><#if fieldItem.primaryKey>${fieldItem.type} id</#if></#list>) {
        if (ObjectUtils.isEmpty(id)) {
            throw new BizIllegalArgumentException("删除的ID不能为空");
        }
        ${entityName} item = queryById(id);
        if(item == null) {
            throw new BizResourceNotFoundException("资源不存在, id: " + id);
        }
        try {
            ${entityName?uncap_first}DAO.deleteById(id);
            return item;
        } catch (Exception e) {
            log.error("delete ${entityName} error", e);
            throw new BizInternalServerException("删除${entityName}错误");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int batchDelete(List<${common.getPrimaryType(fieldList)}> ids) {
        try {
            if (ObjectUtils.isEmpty(ids)) {
                throw new BizIllegalArgumentException("删除的ID不能为空");
            }
            int column = ${entityName?uncap_first}DAO.deleteById(ids.toArray(String[]::new));
            log.info("批量删除 {} 条${entityName}数据", column);
            return column;
        } catch (Exception e) {
            log.error("delete ${entityName} error", e);
            throw new BizInternalServerException("批量删除${entityName}错误");
        }
    }

    /*================*/
    /* private method */
    /*================*/

    private void fillPrimaryKey(${entityName} entity) {
        entity.set${common.getPrimaryName(fieldList)?cap_first}(UUID.randomUUID());
    }

}